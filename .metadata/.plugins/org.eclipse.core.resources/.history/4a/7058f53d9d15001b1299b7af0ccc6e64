package br.ufg.inf.model.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import br.ufg.inf.ctrl.excecao.FabricanteException;
import br.ufg.inf.model.entidade.Fabricante;

public class FabricanteDao {
	
	Connection conn;
	
	public FabricanteDao(Connection conn) {
		this.conn = conn;
	}
	
	public List<Fabricante> lista() throws FabricanteException{
	
		List<Fabricante> retorno = new ArrayList<Fabricante>();
		ResultSet rs = null;
		PreparedStatement st = null;
		try {
			String sql = "SELECT * FROM tb_fabricante ";
			st = conn.prepareStatement(sql);
			rs = st.executeQuery();
			while(rs.next()){
				Fabricante fabricante = new Fabricante(rs.getString(2), rs.getInt(1));
				retorno.add(fabricante);
			}
		}catch (SQLException e) {
			throw new FabricanteException("Erro no banco de dados: "+e.getMessage());
		}finally {
			DB.closeStatment(st);
			DB.closeResultSet(rs);
		}
		return retorno;
	}
	
	public Fabricante procurarPorId(Integer id) throws FabricanteException {

		Fabricante fabricante = null;
		ResultSet rs = null;
		PreparedStatement st = null;
		try {
			String sql = "SELECT * FROM tb_fabricante WHERE fabricanteId = ? ";
			st = conn.prepareStatement(sql);
			st.setInt(1, id);
			rs = st.executeQuery();
			if(rs.next()){
				fabricante = new Fabricante(rs.getString(2), rs.getInt(1));
			}
		}catch (SQLException e) {
			throw new FabricanteException("Erro no banco de dados: "+e.getMessage());
		}finally {
			DB.closeStatment(st);
			DB.closeResultSet(rs);
		}
		return fabricante;
	}
	
	public Fabricante inserir(Fabricante fabricante) throws FabricanteException {
		
		PreparedStatement st = null;
		try {
			st = conn.prepareStatement(" "
					+ "INSERT INTO tb_fabricante "
					+ "(fabricanteNome) VALUES (?)",
			Statement.RETURN_GENERATED_KEYS);
			st.setString(1, fabricante.getFabricanteNome());
			int rowsAffected = st.executeUpdate();
			if(rowsAffected > 0) {
				ResultSet rs = st.getGeneratedKeys();
				if(rs.next()) {
					fabricante.setFabricanteID(rs.getInt(1));    
				}
			}else {
				throw new FabricanteException("Ação inesperada! Nenhuma linha foi inserida.");
			}
		}
		catch (SQLException e) {
			throw new FabricanteException("Erro no banco de dados: "+e.getMessage());
		}finally {
			DB.closeStatment(st);
		}
		return fabricante;
	}

	public Fabricante excluir(Fabricante fabricante) throws FabricanteException {
		PreparedStatement st = null;
		try {
			st = conn.prepareStatement(
				"DELETE FROM tb_fabricante WHERE fabricanteId = ?");
			st.setInt(1,fabricante.getFabricanteId());
			st.executeUpdate();
		}
		catch (SQLException e) {
			throw new FabricanteException("Erro no banco de dados: "+e.getMessage());
		} 
		finally {
			DB.closeStatment(st);
		}
		return fabricante;
	}

	public Fabricante alterar(Fabricante fabricante) throws FabricanteException {
		PreparedStatement st = null;
		try {
			st = conn.prepareStatement(" "
					+ "UPDATE tb_fabricante "
					+ "SET fabricanteNome = ? "
					+ "WHERE fabricanteId = ? ");
			
			st.setString(1, fabricante.getFabricanteNome());
			st.setInt(2, fabricante.getFabricanteId());
			st.executeUpdate();
		}
		catch (SQLException e) {
			throw new FabricanteException("Erro no banco de dados: "+e.getMessage());
		}finally {
			DB.closeStatment(st);
		}
		return fabricante;
	}
	
	

}